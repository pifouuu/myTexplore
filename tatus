[1mdiff --git a/include/envs/BlockRoom.hh b/include/envs/BlockRoom.hh[m
[1mindex 27de388..2fc8037 100644[m
[1m--- a/include/envs/BlockRoom.hh[m
[1m+++ b/include/envs/BlockRoom.hh[m
[36m@@ -97,10 +97,12 @@[m [mpublic:[m
 	float* red_box_ew;[m
 	float* blue_box_ns;[m
 	float* blue_box_ew;[m
[31m-	float* tutor_eye_ns;[m
[31m-	float* tutor_eye_ew;[m
 	std::vector<block_t> blocks;[m
 [m
[32m+[m	[32mfloat* tutor_eye_ns = NULL;[m
[32m+[m	[32mfloat* tutor_eye_ew = NULL;[m
[32m+[m
[32m+[m
 	std::map<std::string, int> tutor_actions;[m
 	std::map<std::string, int> actions;[m
 	int numactions;[m
[1mdiff --git a/src/envs/BlockRoom.cc b/src/envs/BlockRoom.cc[m
[1mindex 57845df..3af509c 100644[m
[1m--- a/src/envs/BlockRoom.cc[m
[1m+++ b/src/envs/BlockRoom.cc[m
[36m@@ -22,7 +22,7 @@[m [mBlockRoom::BlockRoom(Random &rand, bool with_tutor, bool stochastic):[m
 			rng(rand),[m
 			WITH_TUTOR(with_tutor),[m
 			state_dim_base(9),[m
[31m-			s(state_dim_base+5*(nbRedBlocks+nbBlueBlocks)+2*with_tutor),[m
[32m+[m			[32ms(state_dim_base+5*(nbRedBlocks+nbBlueBlocks)),[m
 			agent_ns(&(s[0])),[m
 			agent_ew(&(s[1])),[m
 			block_hold(&(s[2])),[m
[36m@@ -52,11 +52,8 @@[m [mBlockRoom::BlockRoom(Random &rand, bool with_tutor, bool stochastic):[m
 [m
 [m
 	if (WITH_TUTOR){[m
[31m-		tutor_eye_ns = &(s[state_dim_base]);[m
[31m-		tutor_eye_ew = &(s[state_dim_base+1]);[m
 		actions[std::string("LOOK_TUTOR")] = cnt_actions++;[m
 [m
[31m-[m
 		tutor_actions[std::string("LOOK_AGENT")] = cnt_tutor_actions++;[m
 		tutor_actions[std::string("LOOK_RED_BOX")] = cnt_tutor_actions++;[m
 		tutor_actions[std::string("LOOK_BLUE_BOX")] = cnt_tutor_actions++;[m
[36m@@ -66,11 +63,11 @@[m [mBlockRoom::BlockRoom(Random &rand, bool with_tutor, bool stochastic):[m
 [m
 	for (int i = 0; i<nbRedBlocks; i++){[m
 		block_t block([m
[31m-				&(s[5*i+state_dim_base+2*with_tutor + 0]),[m
[31m-				&(s[5*i+state_dim_base+2*with_tutor + 1]),[m
[31m-				&(s[5*i+state_dim_base+2*with_tutor + 2]),[m
[31m-				&(s[5*i+state_dim_base+2*with_tutor + 3]),[m
[31m-				&(s[5*i+state_dim_base+2*with_tutor + 4]));[m
[32m+[m				[32m&(s[5*i+state_dim_base + 0]),[m
[32m+[m				[32m&(s[5*i+state_dim_base + 1]),[m
[32m+[m				[32m&(s[5*i+state_dim_base + 2]),[m
[32m+[m				[32m&(s[5*i+state_dim_base + 3]),[m
[32m+[m				[32m&(s[5*i+state_dim_base + 4]));[m
 		blocks.push_back(block);[m
 [m
 		std::string name = "LOOK_RED_BLOCK_";[m
[36m@@ -84,11 +81,11 @@[m [mBlockRoom::BlockRoom(Random &rand, bool with_tutor, bool stochastic):[m
 [m
 	for (int i = 0; i<nbBlueBlocks; i++){[m
 		block_t block([m
[31m-				&(s[5*(i+nbRedBlocks)+state_dim_base+2*with_tutor + 0]),[m
[31m-				&(s[5*(i+nbRedBlocks)+state_dim_base+2*with_tutor + 1]),[m
[31m-				&(s[5*(i+nbRedBlocks)+state_dim_base+2*with_tutor + 2]),[m
[31m-				&(s[5*(i+nbRedBlocks)+state_dim_base+2*with_tutor + 3]),[m
[31m-				&(s[5*(i+nbRedBlocks)+state_dim_base+2*with_tutor + 4]));[m
[32m+[m				[32m&(s[5*(i+nbRedBlocks)+state_dim_base + 0]),[m
[32m+[m				[32m&(s[5*(i+nbRedBlocks)+state_dim_base + 1]),[m
[32m+[m				[32m&(s[5*(i+nbRedBlocks)+state_dim_base + 2]),[m
[32m+[m				[32m&(s[5*(i+nbRedBlocks)+state_dim_base + 3]),[m
[32m+[m				[32m&(s[5*(i+nbRedBlocks)+state_dim_base + 4]));[m
 		blocks.push_back(block);[m
 [m
 		std::string name = "LOOK_BLUE_BLOCK_";[m
[36m@@ -136,7 +133,7 @@[m [mint BlockRoom::get_blocks_in() const {[m
 int BlockRoom::get_blocks_right() const {[m
 	int nb_blocks_right = 0;[m
 	for (auto block: blocks){[m
[31m-		nb_blocks_right += (*block.is_in_blue_box && *block.color==1 || *block.is_in_red_box && *block.color==0);[m
[32m+[m		[32mnb_blocks_right += (*block.is_in_blue_box && *block.color==1) || (*block.is_in_red_box && *block.color==0);[m
 	}[m
 	return nb_blocks_right;[m
 }[m
[36m@@ -168,12 +165,13 @@[m [mvoid BlockRoom::getMinMaxFeatures(std::vector<float> *minFeat,[m
 	(*maxFeat)[6] = width-1;[m
 	(*maxFeat)[7] = height-1;[m
 	(*maxFeat)[8] = width-1;[m
[32m+[m
 	for (int i = 0; i<nbRedBlocks+nbBlueBlocks; i++){[m
[31m-		(*maxFeat)[state_dim_base+2*WITH_TUTOR+5*i] = height-1;[m
[31m-		(*maxFeat)[state_dim_base+2*WITH_TUTOR+5*i+1] = width-1;[m
[31m-		(*maxFeat)[state_dim_base+2*WITH_TUTOR+5*i+2] = 1;[m
[31m-		(*maxFeat)[state_dim_base+2*WITH_TUTOR+5*i+3] = 1;[m
[31m-		(*maxFeat)[state_dim_base+2*WITH_TUTOR+5*i+4] = 1;[m
[32m+[m		[32m(*maxFeat)[state_dim_base+5*i] = height-1;[m
[32m+[m		[32m(*maxFeat)[state_dim_base+5*i+1] = width-1;[m
[32m+[m		[32m(*maxFeat)[state_dim_base+5*i+2] = 1;[m
[32m+[m		[32m(*maxFeat)[state_dim_base+5*i+3] = 1;[m
[32m+[m		[32m(*maxFeat)[state_dim_base+5*i+4] = 1;[m
 	}[m
 [m
 	(*minFeat)[2] = -1;[m
[36m@@ -183,7 +181,7 @@[m [mvoid BlockRoom::getMinMaxReward(float *minR,[m
 		float *maxR){[m
 [m
 	*minR = 0.0;[m
[31m-	*maxR = 1000.0;[m
[32m+[m	[32m*maxR = 100.0;[m
 [m
 }[m
 [m
[36m@@ -290,6 +288,7 @@[m [mvoid BlockRoom::print_map() const{[m
 }[m
 [m
 std::vector<float> BlockRoom::generate_state(){[m
[32m+[m	[32m/* Beware, not working because of with_tutor[m
 	std::vector<float> g(state_dim_base+5*(nbRedBlocks+nbBlueBlocks)+2*WITH_TUTOR);[m
 	g[6] = rng.uniformDiscrete(0, width-1);[m
 	g[5] = rng.uniformDiscrete(0, height-1);[m
[36m@@ -377,7 +376,7 @@[m [mstd::vector<float> BlockRoom::generate_state(){[m
 			}[m
 		}[m
 	}[m
[31m-	return g;[m
[32m+[m	[32mreturn g;*/[m
 }[m
 [m
 void BlockRoom::reset(){[m
[36m@@ -757,7 +756,7 @@[m [mocc_info_t BlockRoom::apply(int action){[m
 				(*block_hold) = -1;[m
 				success = true;[m
 				if (terminal()){[m
[31m-					reward += 1000;[m
[32m+[m					[32mreward += 100;[m
 				}[m
 				else {[m
 					//if (NOPICKBACK) reward += 100;[m
[36m@@ -779,7 +778,7 @@[m [mocc_info_t BlockRoom::apply(int action){[m
 				(*block_hold) = -1;[m
 				success = true;[m
 				if (terminal()){[m
[31m-					reward += 1000;[m
[32m+[m					[32mreward += 100;[m
 				}[m
 				else {[m
 					//if (NOPICKBACK) reward += 100;[m
[36m@@ -788,12 +787,9 @@[m [mocc_info_t BlockRoom::apply(int action){[m
 		}[m
 	}[m
 	if (WITH_TUTOR && action==actions["LOOK_TUTOR"]){[m
[31m-		if ((*agent_eye_ew) != (*tutor_eye_ew) || (*agent_eye_ns) != (*tutor_eye_ns)){[m
[31m-			(*agent_eye_ew) = (*tutor_eye_ew);[m
[31m-			(*agent_eye_ns) = (*tutor_eye_ns),[m
[31m-					reward=+1;[m
[31m-			success = true;[m
[31m-		}[m
[32m+[m		[32m(*agent_eye_ew) = (*tutor_eye_ew);[m
[32m+[m		[32m(*agent_eye_ns) = (*tutor_eye_ns);[m
[32m+[m		[32msuccess = true;[m
 	}[m
 	if (action==actions["LOOK_RED_BOX"])	{[m
 		(*agent_eye_ew) = (*red_box_ew);[m
[1mdiff --git a/src/myRlExperiment.cpp b/src/myRlExperiment.cpp[m
[1mindex d01f7c0..bbefd22 100644[m
[1m--- a/src/myRlExperiment.cpp[m
[1m+++ b/src/myRlExperiment.cpp[m
[36m@@ -994,7 +994,6 @@[m [mint main(int argc, char **argv) {[m
 		name += "_lambda_"+std::to_string(lambda);[m
 		name += "_alpha_"+std::to_string(alpha);[m
 		name += "_df_"+std::to_string(discountfactor);[m
[31m-		name += "_pretrain_"+std::to_string(pretrain_steps);[m
 		//if (M != 0) {name += "_m_"+std::to_string(M);}[m
 //		if (!reltrans) {name += "_abstrans";}[m
 //		name += "_splitmargin_0.05";[m
